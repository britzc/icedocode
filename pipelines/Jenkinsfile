def project = 'britzc-devops'
def appName = 'icedoapp-frontend'
def feSvcName = "${appName}"
def imageTag = "gcr.io/${project}/${appName}:${env.BRANCH_NAME}.${env.BUILD_NUMBER}"

pipeline {
    agent {
        kubernetes {
      label 'icedo-app'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  # Use service account that can deploy to all namespaces
  serviceAccountName: cd-jenkins 
  containers:
  - name: golang
    image: golang:1.10
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: '/opt/app/shared'
      name: sharedvolume
  - name: gcloud
    image: gcr.io/cloud-builders/gcloud
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: '/opt/app/shared'
      name: sharedvolume
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    command:
    - cat
    tty: true
  volumes:
  - name: sharedvolume
    emptyDir: {}
"""
        }
    }

    environment {
        GOPATH = "/home/jenkins/workspace/icedo-app_${env.BRANCH_NAME}"
        APPPATH = 'src/icedo/sandbox'
    }

    stages {
        stage("Setting Up") {
            steps{

                slackSend message:"${feSvcName} Build started ${env.BUILD_NUMBER}"

                script{
                    try{
                        sh "echo $GOPATH"
                        sh "rm -r *"
                    } catch (error){
                        throw error
                    }
                }

            }
        }

        stage("Checking Out Code") {
            steps{

                checkout changelog: false,
                         poll: true,
                         scm: [$class: "GitSCM",
                         branches: [[name: "*/${env.BRANCH_NAME}"]],
                         extensions: [[$class: "RelativeTargetDirectory", relativeTargetDir: "src/icedo/sandbox"]],
                         userRemoteConfigs: [[credentialsId: "source:britzc-devops",
                                              url: "https://source.developers.google.com/p/britzc-devops/r/icedocode"]]]


            }
        }

        stage("Getting Dependancies") {
            steps{

                container('golang'){
                    dir("${env.GOPATH}"){
                        script{
                            try{
                                sh "go get github.com/nats-io/go-nats"
                            } catch (error){
                                throw error
                            }
                        }
                    }
                }

            }
        }

        stage("Unit Testing") {
            steps{

                container('golang'){
                    dir("src/icedo/sandbox"){
                        script{
                            try{
                                sh "go test ./... -tags unit_test"
                            } catch (error){
                                slackSend message:"${feSvcName} Unit testing failed ${env.BUILD_NUMBER}"
                                throw error
                            }
                        }
                    }
                }

            }
        }

        stage("Integration Testing") {
            steps{

                container('golang'){
                    dir("src/icedo/sandbox"){
                        script{
                            try{
                                sh "go test ./... -tags integration_test"
                            } catch (error){
                                slackSend message:"${feSvcName} Integration testing failed ${env.BUILD_NUMBER}"
                                throw error
                            }
                        }
                    }
                }

            }
        }

        stage("Compile Binary") {
            steps{

                container('golang'){
                    dir("src/icedo/sandbox"){
                        script{
                            try{
                                sh "GOOS=linux go build -o icedoapp"
                            } catch (error){
                                slackSend message:"${feSvcName} Compile binary failed ${env.BUILD_NUMBER}"
                                throw error
                            }
                        }
                    }
                }

            }
        }
        
        stage('Publishing Docker Image') {
            steps {

                container('gcloud') {
                    dir("src/icedo/sandbox"){
                        sh "PYTHONUNBUFFERED=1 gcloud builds submit -t ${imageTag} ."
                    }
                }

            }
        }

        stage('Deploy Prod') {
            when { 
                anyOf { branch 'canary'; branch 'master' }
            }
            steps {

                slackSend message:"${feSvcName} ${env.BRANCH_NAME} deployment started"

                container('kubectl') {
                    dir("src/icedo/sandbox"){
                        sh("sed -i.bak 's#gcr.io/cloud-solutions-images/icedoapp:1.0.0#${imageTag}#' ./k8s/${env.BRANCH_NAME}/*.yaml")

                        sh("kubectl --namespace=production apply -f k8s/quota/")
                        sh("kubectl --namespace=production apply -f k8s/services/")
                        sh("kubectl --namespace=production apply -f k8s/${env.BRANCH_NAME}/")

                        sh("echo http://`kubectl --namespace=production get service/${feSvcName} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'` > ${feSvcName}")
                    }
                } 

                slackSend message:"${feSvcName} ${env.BRANCH_NAME} deployment completed"

            }
        }

        stage('Deploy Dev') {
            when { 
                not { branch 'master' } 
                not { branch 'canary' }
            } 
            steps {
                slackSend message:"${feSvcName} ${env.BRANCH_NAME} deployment started"

                container('kubectl') {
                    dir("src/icedo/sandbox"){
                        sh("kubectl get ns ${env.BRANCH_NAME} || kubectl create ns ${env.BRANCH_NAME}")

                        sh("sed -i.bak 's#LoadBalancer#ClusterIP#' ./k8s/services/frontend.yaml")
                        sh("sed -i.bak 's#gcr.io/cloud-solutions-images/icedoapp:1.0.0#${imageTag}#' ./k8s/dev/*.yaml")

                        sh("kubectl --namespace=production apply -f k8s/quota/")
                        sh("kubectl --namespace=${env.BRANCH_NAME} apply -f k8s/services/")
                        sh("kubectl --namespace=${env.BRANCH_NAME} apply -f k8s/dev/")

                        echo 'To access your environment run `kubectl proxy`'
                        echo "Then access your service via http://localhost:8001/api/v1/proxy/namespaces/${env.BRANCH_NAME}/services/${feSvcName}:80/"
                    }
                }

                slackSend message:"${feSvcName} ${env.BRANCH_NAME} deployment completed"
            }     
        }

    }

    post {
        always {
            echo "One way or another, I have finished"
            step([$class: 'InfluxDbPublisher', customData: null, customDataMap: null, customPrefix: null, target: 'grafana'])
        }
        success {
            slackSend message:"${feSvcName} Build successful ${env.BUILD_NUMBER}"
            echo "I succeeeded!"
        }
        unstable {
            echo "I am unstable :/"
        }
        failure {
            slackSend message:"${feSvcName} Build failed ${env.BUILD_NUMBER}"
            echo "I failed :("
        }
        changed {
            echo "Things were different before..."
        }
    }
}
